{"version":3,"sources":["Table.jsx","List.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Table","data","tableName","row","name","this","props","rows","map","index","className","type","placeholder","getValue","onChange","event","addFunction","target","value","tableNames","createRows","React","Component","List","state","handleChange","bind","handleSubmit","setState","preventDefault","title","onSubmit","currList","item","key","App","buttonClicked","students","assignments","grades","handleButtonClicked","addAssignment","addStudent","addGrade","buttonName","assignmentName","concat","studentName","assignment","student","score","tabChoice","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e206aff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Table extends React.Component {\r\n  getValue(data, tableName, row) {\r\n    if (tableName in data && row in data[tableName]) {\r\n      return data[tableName][row];\r\n    } else {\r\n      return \"Add Score\";\r\n    }\r\n  }\r\n\r\n  createRows(name) {\r\n    return (\r\n      <div>\r\n        {this.props.rows.map((row, index) => (\r\n          <div className=\"Box-row d-flex flex-justify-between\">\r\n            {row}\r\n            <input\r\n              className=\"form-control input-sm\"\r\n              type=\"text\"\r\n              placeholder={this.getValue(this.props.data, name, row)}\r\n              onChange={event =>\r\n                this.props.addFunction(name, row, event.target.value)\r\n              }\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.tableNames.map((name, index) => (\r\n          <div className=\"pt-6\">\r\n            <div className=\"Box col-6 mx-auto\">\r\n              <div className=\"Box-header Box-title\">{name}</div>\r\n              <div>{this.createRows(name)}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\nclass List extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.setState({\r\n      value: \"\"\r\n    });\r\n\r\n    this.props.addFunction(this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-6 mx-auto\">\r\n        {/*Replace the code below to call the title prop*/}\r\n        <p className=\"h2\">{this.props.title}</p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            <input\r\n              className=\"form-control input-sm\"\r\n              type=\"text\"\r\n              placeholder={this.props.placeholder}\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <input className=\"btn btn-sm\" type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n        <ul className=\"Box\">\r\n          <div className=\"Box-header\">{this.props.title}</div>\r\n          {this.props.currList.map((item, index) => (\r\n            <li className=\"Box-row\" key={index}>\r\n              {\" \"}\r\n              {item}{\" \"}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport Table from \"./Table\";\r\nimport List from \"./List\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      buttonClicked: \"\",\r\n      students: [],\r\n      assignments: [] /*Below this line, add the students state variable*/,\r\n      grades: {}\r\n    };\r\n\r\n    this.handleButtonClicked = this.handleButtonClicked.bind(this);\r\n    this.addAssignment = this.addAssignment.bind(this);\r\n    /* Bind addStudent method */\r\n    this.addStudent = this.addStudent.bind(this);\r\n    this.addGrade = this.addGrade.bind(this);\r\n  }\r\n\r\n  handleButtonClicked(buttonName) {\r\n    this.setState({\r\n      buttonClicked: buttonName\r\n    });\r\n  }\r\n\r\n  /*Check out this addAssignment method*/\r\n  addAssignment(assignmentName) {\r\n    this.setState({\r\n      assignments: this.state.assignments.concat(assignmentName)\r\n    });\r\n  }\r\n\r\n  /*Write an addStudent method here*/\r\n  addStudent(studentName) {\r\n    this.setState({\r\n      students: this.state.students.concat(studentName)\r\n    });\r\n  }\r\n\r\n  addGrade(assignment, student, score) {\r\n    let grades = this.state.grades;\r\n    let assignmentName = assignment;\r\n    let studentName = student;\r\n    if (!(assignment in grades)) {\r\n      grades[assignmentName] = {};\r\n    }\r\n    grades[assignmentName][studentName] = score;\r\n    this.setState({ grades: grades });\r\n  }\r\n\r\n  render() {\r\n    let tabChoice = <div />;\r\n\r\n    /*Uncomment below to render assignments*/\r\n    if (this.state.buttonClicked === \"assignments\") {\r\n      tabChoice = (\r\n        <List\r\n          placeholder=\"Add Assignment...\"\r\n          currList={this.state.assignments}\r\n          addFunction={this.addAssignment}\r\n          title=\"Assignments\"\r\n        />\r\n      );\r\n    }\r\n\r\n    /* Change below to render students*/\r\n    if (this.state.buttonClicked === \"students\") {\r\n      tabChoice = (\r\n        <List\r\n          placeholder=\"Add Student...\" \r\n          currList={this.state.students}\r\n          addFunction={this.addStudent}\r\n          title=\"Student Roster\"\r\n        />\r\n      );\r\n    }\r\n\r\n    /* Uncomment lines below to render grades*/\r\n    if (this.state.buttonClicked === \"grades\") {\r\n      tabChoice = (\r\n        <Table\r\n          tableNames={this.state.assignments}\r\n          rows={this.state.students}\r\n          addFunction={this.addGrade}\r\n          data={this.state.grades}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"Box Box--spacious f4\">\r\n          <div className=\"Box-header\">\r\n            <h3 className=\"Box-title d-flex flex-justify-center\">GradeBook</h3>\r\n          </div>\r\n        </div>\r\n        <nav className=\"UnderlineNav d-flex flex-justify-center\">\r\n          <div className=\"UnderlineNav-body pt-6\">\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"assignments\")}\r\n            >\r\n              Assignments\r\n            </button>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"students\")}\r\n            >\r\n              Students\r\n            </button>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"grades\")}\r\n            >\r\n              Grades\r\n            </button>\r\n          </div>\r\n        </nav>\r\n        {tabChoice}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}